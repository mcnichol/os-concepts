{
  "metadata": {
    "book": "Operating System Concepts",
    "edition": 10,
    "asin": "B07CVKH7BD",
    "isbn13": " 9781119320913",
    "publishYear": 2018,
    "chapter": 2,
    "chapterTitle": "Operating-System Structures",
    "authors": [{"firstName": "Abraham", "middleName": null, "lastName": "Silbershatz"},
                {"firstName": "Peter", "middleName": "Baer", "lastName": "Galvin"},
                {"firstName": "Greg", "middleName": null, "lastName": "Gagne"}]
  },
  "summary": [
    "An operating system provides an environment for the execution of programs by providing services to users and programs.",
    "The three primary approaches for interacting with an operating system are (1) command interpreters, (2) graphical user interfaces, and (3) touch-screen interfaces.",
    "System calls provide an interface to the services made available by an operating system. Programmers use a system call's application programming interface (API) for accessing system-call services.",
    "System calls can be divided into six major categories: (1) process control, (2) file management, (3) device management, (4) information maintenance, (5) communications, and (6) protection.",
    "The standard C library provides the system-call interface for UNIX and Linux systems.",
    "Operating systems also include a collection of system programs that provide utilities to users.",
    "A linker combines several relocatable object modules into a single binary executable file. A loader loads the executable file into memory, where it becomes eligible to run on an available CPU.",
    "There are several reasons why applications are operating-system specific. These include different binary formats for program executables, different instruction sets for different CPUs, and system calls that vary from one operating sytem to another.",
    "An operating system is designed with specific goals in mind. These goals ultimately determine the operating system's policies. An operating system implements these policies through specific mechanisms.",
    "A monolithic operating system has no structure; all functionality is provided in a single, static binary file that runs in a single address space. Although such systems are difficult to modify, their primary benefit is efficiency.",
    "A layered operating system is divided into a number of discrete layers, where the bottom layer is the hardware interface and the highest layer is the user interface. Although layered software systems have had some success, this approach is generally not ideal for designing operating systems due to performance problems.",
    "The microkernel approach for designing operating systems uses a minimal kernel; most services run as user-level applications. Communication takes place via message passing.",
    "A modular approach for designing operating systems provides operating system services through modules that can be loaded and removed during run time. Many contemporary operating systems are constructed as hybrid systems using a combination of a monolithic kernel and modules.",
    "A boot loader loads an operating system into memory, performs initialization, and beings system execution."
  ],
  "practiceExercises": [{ 
    "number": "2.1", 
    "question":"What is the purpose of system calls?", 
    "answerIndividual": "The purpose of system calls is to provide an interface allowing users to make calls to the kernel without providing full privileges and access to the entire memory space. In this way the user can make a system call through c libraries and the cpu flag will be set to switch to kernel mode and will perform the work on behalf of what the user requested.",
    "answerKey": "System calls allow user-level processes to request services of the operating system."
  },{ 
    "number": "2.2", 
    "question":"What is the purpose of the command interpreter? Why is it usually separate from the kernel?", 
    "answerIndividual": "The command interpreter is used to get and execute the next user-specified command. The reason that the command interpreter is left separate from the kernel is to decouple these enabling the command interpreter to change without needing to change the kernel.",
    "answerKey": "It reads commands from the user or from a file of commands and executes them, usually by turning them into one or more system calls. It is usually not part of the kernel since the command interpreter is subject to changes."
  },{ 
    "number": "2.3", 
    "question":"What system calls have to be executed by a command interpreter or shell in order to start a new process on a UNIX system?", 
    "answerIndividual": "fork()",
    "answerKey": "In Unix systems, a fork system call followed by an exec system call need to be performed to start a new process. The fork call clones the currently executing process, while the exec call overlays a new process based on a different executable over the calling process."
  },{ 
    "number": "2.4", 
    "question":"What is the purpose of system programs?", 
    "answerIndividual": "",
    "answerKey": ""
  },{ 
    "number": "2.5", 
    "question":"What is the main advantage of the layered approach to system design? What are the disadvantages of the layered approach?", 
    "answerIndividual": "",
    "answerKey": ""
  },{ 
    "number": "2.6", 
    "question":"List five services provided by an operating system, and explain how each creates convenience for users. In which cases would it be impossible for user-level programs to provide these services? Explain your answer.", 
    "answerIndividual": "",
    "answerKey": ""
  },{ 
    "number": "2.7", 
    "question":"Why do some systems store the operating system in firmware, while others store it on disk?", 
    "answerIndividual": "",
    "answerKey": ""
  },{ 
    "number": "2.8", 
    "question":"How could a system be designed to allow a choice of operating systems from which to boot? What would the bootstrap program need to do?", 
    "answerIndividual": "",
    "answerKey": ""
  }],
  "furtherReading": [
    "Atlidakis (2016) - POSIX Abstractions in Modern Operating Systems: The Old, the New, and the Missing", 
    "Bryant and O'Hallaron (2015) - Computer Systems: A Programmer's Perspective 3E", 
    "Gregg (2014) - Systems Performance - Enterprise and the Cloud", 
    "Levin (2013) - Mac OS X and iOS Internals to the Apple's Core", 
    "Levin (2015) - Android Internals - A Confectioner's Cookbook. Volume I", 
    "Love (2010) - Linux Kernel Development 3E", 
    "Mauerer (2008) - Professional Linux Kernel Architecture", 
    "McDougall and Mauro (2007) - Solaris Internals 2E", 
    "McKusick (2015) - The Design and Implementation of the FreeBSD UNIX Operating System 2E",
    "Russinovich (2017) - Windows Internals - Part 1 7E",
    "Ward (2015) - How LINUX Works - What Every Superuser Should Know 2E"
  ],
  "exercises": [{
    "number": "2.9",
    "question":"The services and functions provided by an operating system can be divided into two main categories. Briefly describe the two categories, and discuss how they differ.",
    "answerIndividual": "",
    "answerKey": ""
  },{
    "number": "2.10",
    "question":"Describe three general methods for passing parameters to the operating system.",
    "answerIndividual": "",
    "answerKey": ""
  },{
    "number": "2.11",
    "question":"Describe how you could obtain a statistical profile of the amount of time a program spends executing different sections of its code. Discuss the importance of obtaining such a statistical profile.",
    "answerIndividual": "",
    "answerKey": ""
  },{
    "number": "2.12",
    "question":"What are the advantages and disadvantages of using the same system-call interface for manipulating both files and devices?",
    "answerIndividual": "",
    "answerKey": ""
  },{
    "number": "2.13",
    "question":"Would it be possible for the user to develop a new command interpreter using the system-call interface provided by the operating system?",
    "answerIndividual": "",
    "answerKey": ""
  },{
    "number": "2.14",
    "question":"Describe why Android uses ahead-of-time (AOT) rather than just-in-time (JIT) compilation.",
    "answerIndividual": "",
    "answerKey": ""
  },{
    "number": "2.15",
    "question":"What are the two models of interprocess communication? What are the strengths and weaknesses of the two approaches?",
    "answerIndividual": "",
    "answerKey": ""
  },{
    "number": "2.16",
    "question":"Contrast and compare an aplication programming interface (API) and an application binary interface (ABI).",
    "answerIndividual": "",
    "answerKey": ""
  },{
    "number": "2.17",
    "question":"Why is the separation of mechanism and policy desirable?",
    "answerIndividual": "",
    "answerKey": ""
  },{
    "number": "2.18",
    "question":"It is sometimes difficult to achieve a layered approach if two components of the operating system are depndent on each other. Identify a scenario in which it is unclear how to layer two system components that require tight coupling of their functionalities.",
    "answerIndividual": "",
    "answerKey": ""
  },{
    "number": "2.19",
    "question":"What is the main advantage of a microkernel approach to system design? How do user programs and system services interact in a microkernel architecture? What are the disadvantages of using the microkernel approach?",
    "answerIndividual": "",
    "answerKey": ""
  },{
    "number": "2.20",
    "question":"What are the advantages of using loadable kernel modules?",
    "answerIndividual": "",
    "answerKey": ""
  },{
    "number": "2.21",
    "question":"How are iOS and Android similar? How are they different?",
    "answerIndividual": "",
    "answerKey": ""
  },{
    "number": "2.22",
    "question":"Explain why Java programs running on Android systems do not use the standard Java API and virtual machine.",
    "answerIndividual": "",
    "answerKey": ""
  },{
    "number": "2.23",
    "question":"The experimental Synthesis operating system has an assembler incorporated in the kernel. To optimize system-call performance, the kernel assembles routines within kernel space to minimize the path that the system call must take through the kernel. This approach is the antithesis of the layered approach, in which the path through the kernel is extended to make building the operating system easier. Discuss the pros and cons of the Synthesis approach to kernel design and system-performance optimization.",
    "answerIndividual": "",
    "answerKey": ""
  },{
    "number": "2.24",
    "question":"In Section 2.3, we described a program that copies the contents of one file to a destination file. This program works by first prompting the user for the name of the source and destination files. Write this program using either the POSIX or Windows API. Be sure to include all necessary error checking, including ensuring that the source file exists. Once you have correctly designed and tested the program, if you used a system that supports it, run the program using a utility that traces system calls. Linux systems provide the strace utility, and macOS systems use the dtruss command. (The dtruss command, which actually is a front end to dtrace, requires admin privileges, so it must be run using sudo.) These tools can be used as follows (assume that the name of the executable file is FileCopy",
    "answerIndividual": "",
    "answerKey": ""
  }]
}
