{
  "metadata": {
    "book": "Operating System Concepts",
    "edition": 10,
    "asin": "B07CVKH7BD",
    "isbn13": " 9781119320913",
    "publishYear": 2018,
    "chapter": 2,
    "chapterTitle": "Operating-System Structures",
    "authors": [{"firstName": "Abraham", "middleName": null, "lastName": "Silbershatz"},
                {"firstName": "Peter", "middleName": "Baer", "lastName": "Galvin"},
                {"firstName": "Greg", "middleName": null, "lastName": "Gagne"}]
  },
  "summary": [
    "An operating system provides an environment for the execution of programs by providing services to users and programs.",
    "The three primary approaches for interacting with an operating system are (1) command interpreters, (2) graphical user interfaces, and (3) touch-screen interfaces.",
    "System calls provide an interface to the services made available by an operating system. Programmers use a system call's application programming interface (API) for accessing system-call services.",
    "System calls can be divided into six major categories: (1) process control, (2) file management, (3) device management, (4) information maintenance, (5) communications, and (6) protection.",
    "The standard C library provides the system-call interface for UNIX and Linux systems.",
    "Operating systems also include a collection of system programs that provide utilities to users.",
    "A linker combines several relocatable object modules into a single binary executable file. A loader loads the executable file into memory, where it becomes eligible to run on an available CPU.",
    "There are several reasons why applications are operating-system specific. These include different binary formats for program executables, different instruction sets for different CPUs, and system calls that vary from one operating sytem to another.",
    "An operating system is designed with specific goals in mind. These goals ultimately determine the operating system's policies. An operating system implements these policies through specific mechanisms.",
    "A monolithic operating system has no structure; all functionality is provided in a single, static binary file that runs in a single address space. Although such systems are difficult to modify, their primary benefit is efficiency.",
    "A layered operating system is divided into a number of discrete layers, where the bottom layer is the hardware interface and the highest layer is the user interface. Although layered software systems have had some success, this approach is generally not ideal for designing operating systems due to performance problems.",
    "The microkernel approach for designing operating systems uses a minimal kernel; most services run as user-level applications. Communication takes place via message passing.",
    "A modular approach for designing operating systems provides operating system services through modules that can be loaded and removed during run time. Many contemporary operating systems are constructed as hybrid systems using a combination of a monolithic kernel and modules.",
    "A boot loader loads an operating system into memory, performs initialization, and beings system execution."
  ],
  "practiceExercises": [{ 
    "number": "2.1", 
    "question":"What is the purpose of system calls?", 
    "answerIndividual": "The purpose of system calls is to provide an interface allowing users to make calls to the kernel without providing full privileges and access to the entire memory space. In this way the user can make a system call through c libraries and the cpu flag will be set to switch to kernel mode and will perform the work on behalf of what the user requested.",
    "answerKey": "System calls allow user-level processes to request services of the operating system."
  },{ 
    "number": "2.2", 
    "question":"What is the purpose of the command interpreter? Why is it usually separate from the kernel?", 
    "answerIndividual": "The command interpreter is used to get and execute the next user-specified command. The reason that the command interpreter is left separate from the kernel is to decouple these enabling the command interpreter to change without needing to change the kernel.",
    "answerKey": "It reads commands from the user or from a file of commands and executes them, usually by turning them into one or more system calls. It is usually not part of the kernel since the command interpreter is subject to changes."
  },{ 
    "number": "2.3", 
    "question":"What system calls have to be executed by a command interpreter or shell in order to start a new process on a UNIX system?", 
    "answerIndividual": "fork()",
    "answerKey": "In Unix systems, a fork system call followed by an exec system call need to be performed to start a new process. The fork call clones the currently executing process, while the exec call overlays a new process based on a different executable over the calling process."
  },{ 
    "number": "2.4", 
    "question":"What is the purpose of system programs?", 
    "answerIndividual": "System programs are built to provide access to perform system operations (file operations, i/o operations, execute programs and provide error handling). These system programs are decoupled from command interpreters in linux environments for example so the interpreter can be responsible for forking and loading the program into memory and delegate functionality to the program itself.",
    "answerKey": "System programs can be thought of as bundles of useful system calls. They provide basic functionality to users so that users do not need to write their own programs to solve common problems."
  },{ 
    "number": "2.5", 
    "question":"What is the main advantage of the layered approach to system design? What are the disadvantages of the layered approach?", 
    "answerIndividual": "The main advantage of the layered approach to system design is the logical structure itself and simplicity with which it creates a mental model of the system and how that can be worked on / debugged by the developer. At each layer, with a properly working system, one can infer that each layer below is working as expected. The disadvantages of such a system or the added overhead for each call in addition the layers must be well defined in terms of the goals/abstractions for each layer. The added overhead exists due to a requirement of navigating each layer for a call to the layer below.",
    "answerKey": "As in all cases of modular design, designing an operating system in a modular way has several advantages. The system i s easier to debug and modify because changes affect only limited sections of the system rather than touching all sections of the operating system. Information is kept only where it is needed and is accessible only within a defined and restricted area, so any bugs affecting that data must be limited to a specific module or layer."
  },{ 
    "number": "2.6", 
    "question":"List five services provided by an operating system, and explain how each creates convenience for users. In which cases would it be impossible for user-level programs to provide these services? Explain your answer.", 
    "answerIndividual": "The five services provided by an operating system are User Interface providing convenience by easing the way users interface with system programs (GUI/terminal), Program execution providing convenience by handling the loading into memory and execution of system programs, I/O Operations provides convenience by providing the communication to devices/resources and provide access to them on behalf of the user, File-system manipulation providing convenience by simplifying how files are read/written to filesystems as well as permissions management, Communications providing convenience by aiding processes to communicate among eachother through shared memory or via message passing. User level programs would be unable to provide services for I/O services due to the inability to access these devices directly based on a security/protection model and would berequired to go through system services that coordinate this level of access/control.",
    "answerKey": "The five services are: <ol><li>Program execution - The operating system loads the contents (or sections) of a file into memory and begins its execution. A user-level program could not be trusted to properly allocate cpu time.</li><li>I/O Operations - Disks, tapes, serial lines, and other devices must be communicated with at a very low level. The user need only specify the device and the operation to perform on it, while the system converts that request into device or controller-specific commands. User-level programs cannot be trusted to access only devices they should have access to and to access them only when they are otherwise unused.<</li><li>File-system manipulation - There are many details in file creation, deletion, allocation, and naming that users should not have to perform. Blocks of disk space are used by files and must be tracked. Deleting a file requires removing the name file information and freeing the allocated blocks. Protections must also be checked to assure proper file access. User programs could neither ensure adherence to protection methods nor be trusted to allocate only free blocks and deallocate blocks on file deletion.</li><li>Communications - Message passing between systems requires messages to be turned into packets of information, sent to the network controller, transmitted across a communications medium, and reassembled by the destination system. Packet ordering and data correction must take place. Again, user programs might not coordinate access to the network device, or they might receive packets destined for other processes.</li><li>Error detection - Error detection occurs at both the hardware and software levels. At the hardware level, all data transfers must be inspected to ensure that data have not been corrupted in transit. All data on media must be checked to be sure they have not changed since they were written to the media. At the software level, media must be checked for data consistency; for instance, whether the number of allocated and unallocated blocks of storage match the total number on the device. There, errors are frequently process-independent (for instance, the corruption of data on a disk), so  there must be a global program (the operating system) that handles all types of errors. Also, by having errors processed by the operating system, processes need not contain code to catch and correct all the errors possible on a system.</li>"
  },{ 
    "number": "2.7", 
    "question":"Why do some systems store the operating system in firmware, while others store it on disk?", 
    "answerIndividual": "Some systems may store the operating system in firmware due to the simplicity of the operating system and system resources being leveraged. If it is small enough in form factor it may not actually have the space necessary to store it on disk.",
    "answerKey": "For certain devices, such as handheld PDAs and cellular telephones, a disk with a file system may not be available for the device. In this situation, the operating system must be stored in firmware."
  },{ 
    "number": "2.8", 
    "question":"How could a system be designed to allow a choice of operating systems from which to boot? What would the bootstrap program need to do?", 
    "answerIndividual": "A system could be designed using something such as the GRUB bootloader where the user is provided a list of options for operating system. Upon selection this would need to point to a configuration that would provide mappings to the kernel location and the root file-system identifier.",
    "answerKey": "Consider a system that would like to run both Windows XP and three different distributions of Linux (e.g. RedHat, Debian, and Mandrake). Each operating system will be stored on disk. During system boot-up a special program (which we will call the boot manager) will determine which operating system to boot into. This means that rather initially booting to an operating system, the boot manager will first run during system startup. It is this boot manager that is responsible for determining which system to boot into. Typically the boot managers must be stored at certain locations of the hard disk to be recognized during system startup. Boot managers often provide the user with a selection of systems to boot into; boot managers are also typically designed to boot into a default operating system if no choice is selected by the user."
  }],
  "furtherReading": [
    "Atlidakis (2016) - POSIX Abstractions in Modern Operating Systems: The Old, the New, and the Missing", 
    "Bryant and O'Hallaron (2015) - Computer Systems: A Programmer's Perspective 3E", 
    "Gregg (2014) - Systems Performance - Enterprise and the Cloud", 
    "Levin (2013) - Mac OS X and iOS Internals to the Apple's Core", 
    "Levin (2015) - Android Internals - A Confectioner's Cookbook. Volume I", 
    "Love (2010) - Linux Kernel Development 3E", 
    "Mauerer (2008) - Professional Linux Kernel Architecture", 
    "McDougall and Mauro (2007) - Solaris Internals 2E", 
    "McKusick (2015) - The Design and Implementation of the FreeBSD UNIX Operating System 2E",
    "Russinovich (2017) - Windows Internals - Part 1 7E",
    "Ward (2015) - How LINUX Works - What Every Superuser Should Know 2E"
  ],
  "exercises": [{
    "number": "2.9",
    "question":"The services and functions provided by an operating system can be divided into two main categories. Briefly describe the two categories, and discuss how they differ.",
    "answerIndividual": "The two main categories of services and functions are user basd and system based. User based services are around providing access and ease-of-use to the user in order to interact with and manage system resources. The system based services are for efficient operation of th system itself. They differ in the fact that user focused functions and services are about providing an interface or connection to the user in order to leverage system resources whereas system functions and services are more to do with behaviors on behalf of the system, how they are used efficiently and properly cataloged/protected as events of the system.",
    "answerKey": "One class of services provided by an operating system is to enforce protection between different processes running concurrently in the system. Processes are allowed to access only those memory locations that are associated with their address spaces. Also, processes are not allowed to corrupt files associated with other users. A process is not allowed to access devices directly without operating system intervention. The second class of services provided by an operating system is to provide new functionality that is not supported directly by the underlying hardware. Virtual memory and file systems are two such examples of new services provided by an operating system."
  },{
    "number": "2.10",
    "question":"Describe three general methods for passing parameters to the operating system.",
    "answerIndividual": "Three general methods for passing parameters to the operating system are passing them via registers, they may be stored in a block or table in memory and the address to that block or table is passsed as a parameter in the register, or they may be pushed onto a stack by the application and popped off the stack by by the operating system.",
    "answerKey": ""
  },{
    "number": "2.11",
    "question":"Describe how you could obtain a statistical profile of the amount of time a program spends executing different sections of its code. Discuss the importance of obtaining such a statistical profile.",
    "answerIndividual": "Through using the system provided time profiles of programs you can retrieve information about execution.  Combining this with a type of tracing utility and you can have a program that can analyze the time spent in different sections of code. It would require some relative knowledge of what function the breakpoints referred to, stepping through every function level, or leveraging regular timer interrupts to record the value of the program counter.  Providing this level of detail can highlight potential hot-spots and have a clear picture on the behavior of an application with metrics. This helps us to remove ambiguity with clearly defined information.",
    "answerKey": "One could issue periodic timer interrupts and monitor what instructions or what sections of code are currently executing when the interrupts are delivered. A statistical profile of which pieces of code were active should be consistent with the time spent by the program in different sections of its code. Once such a statistical profile has been obtained, the programmer could optimize those sections of code that are consuming more of the CPU resources."
  },{
    "number": "2.12",
    "question":"What are the advantages and disadvantages of using the same system-call interface for manipulating both files and devices?",
    "answerIndividual": "An advantage of having the same system call interface would be for simplicity. Files and devices can be mounted in such a way that they appear the same to the system. A disadvantage of having both be the same would be forcing all interaction with these two constructs to follow the same patterns should there be device specific calls that must be made. They would likely need to be adopted by files or respond in such a way that a noop would be generated which is uneeded additional complexity.",
    "answerKey": "Each deice can be accessed as though it was a file in the file system. Since most of the kernel deals with devices through this file interface it is relatively easy to add a new device driver by implementing the hardware-specific code to support this abstract file interface. Therefore, this benefits the development of both user program code, which can be written to access devices and files in the same manner, and device driver code, which can be written to support a well-defined API. The disadvantage with using the same interface is that it might be difficult to capture the functionality of certain devices within the context of the file access API, thereby resulting in either a loss of functionality or a loss of performance. Some of this could be overcome by the use of the ioctl operation that provides a general-purpose interface for processes to invoke operations on devices."
  },{
    "number": "2.13",
    "question":"Would it be possible for the user to develop a new command interpreter using the system-call interface provided by the operating system?",
    "answerIndividual": "This could be done. The user would be responsible for connecting to the system-call interface through either shared programs, C libraries, or performing the low level execution of these system calls and appropriate argument passing through memory registers/blocks. This can be a wholistic command interpreter that has functionality embedded as part of the interpreter or can shell out the commands to modules/system programs that can perform the communication to the kernel through the system-call interface.",
    "answerKey": "The command interpreter reads commands from the user or from a file of commands and executres them, usually by turning them into one or more system calls. It is usually not part of the kernel since the command interpreter is subject to changes. A user should be able to develop a new command interpreter using the system-call interface provided by the operating system. The command interpreter allows a user to create and manage processes and also determine ways by which they communicate (such as through pipes and files). As all of this functionality could be accessed by a user-level program using the system-calls, it should be possible for the user to develop a new command-line interpreter. "
  },{
    "number": "2.14",
    "question":"Describe why Android uses ahead-of-time (AOT) rather than just-in-time (JIT) compilation.",
    "answerIndividual": "AOT compilation will compile the source code down to machine code making it more efficient in terms of execution and reducing power consumption. Due to the low power consumption desires of mobile devices where battery life and mobility are critical, this is an important feature.",
    "answerKey": ""
  },{
    "number": "2.15",
    "question":"What are the two models of interprocess communication? What are the strengths and weaknesses of the two approaches?",
    "answerIndividual": "The two models of interprocess communication are through shared-memory model and message-passing model. In the shared memory model processes create and attach to memory space and coordinate CRUD operations on that shared memory. The advantage is at system memory speed but comes at the cost of potential vulnerabilities in the protection model and synchronization of data. In message-passing the processes communicate directly with one another. This avoids conflicts and can work well on small amounts of data at a time but incurs an overhead with each call as the processes themselves are responsible for setting up and closing the connection to processes.",
    "answerKey": "The two models of interprocess communication are message-passing model and the shared-memory model. Message passing is useful for exchanging smaller amounts of data, becasue no conflicts need be avoided. It is also easier to implement than is shared memory for intercomputer communication. Shared memory allows maximum speed and convenience of communication, since it can be done at memory transfer speeds when it takes place within a computer. However, this method compromises on protection and synchronization between the processes sharing memory."
  },{
    "number": "2.16",
    "question":"Contrast and compare an application programming interface (API) and an application binary interface (ABI).",
    "answerIndividual": "An application programming interface provides interfaces detailing how to communicate with functions alongside proper arguments which are consumed by the underlying implementation abstracted away from the user. Coming from the other end at a hardware level, the application binary interface is the interface detailing how to communicate with the operating systems understanding what registers and values must be provided and what to expect in response.",
    "answerKey": "APIs specify certain functions at the application level. At the architecture level, an application binary interface is used to define how different components of binary code can interface for a given operating system on a given architecture. An ABI specifies low-level details, including address width, methods of passing parameters to system calls, the organization of the run-time stack etc. ABI's are typically specified for a given architecture providing little in terms of cross-platform compatibility."
  },{
    "number": "2.17",
    "question":"Why is the separation of mechanism and policy desirable?",
    "answerIndividual": "Mechanisms dictate how something works within a system and policy dictates what will happen. Mechansims are components within this system that ideally can be consumed where policy can dictate what the actual behavior will be. Because programs may need to consume mechanisms in various ways whether they are IO intensive systems or the opposite, being able to change the policy irrespective of the mechanism can provide a level of flexibility making an operating system available and capable of meeting a broader set of use-cases.",
    "answerKey": "Mechanism and policy must be separate to ensure that systems are easy to modify. No two system installations are the same, so each installation may want to tune the operating system to suit its needs. With mechanism and policy separate, the policy may be changed at will while the mechanism stays unchanged. This arrangement provides a more flexible system."
  },{
    "number": "2.18",
    "question":"It is sometimes difficult to achieve a layered approach if two components of the operating system are dependent on each other. Identify a scenario in which it is unclear how to layer two system components that require tight coupling of their functionalities.",
    "answerIndividual": "An example of two components in the operating system which may be dependent on each other may be the CPU scheduler and device drivers for the backing store. If the system is large enough the CPU Scheduler may have information about running active processes that need to be switched in and out of memory requiring access to a backing store however the driver may need to wait for I/O and may need to reschedule the work at the CPU",
    "answerKey": "The virtual memory subsystem and the storage subsystem are typicaly tightly-coupled and requires careful design in a layered system due to the following interactions. Many systems allow files to be mapped into the virtual memory space of an executing process. On the other hand, the virtual memory subsystem typically uses the storage system to provide the backing store for pages that do not currently reside in memory. Also, updates to the filesystem are sometimes buffered in physical memory before it is flushed to disk, thereby requiring careful coordination of the usage of memory between the virtual memory subsystem and the filesystem."
  },{
    "number": "2.19",
    "question":"What is the main advantage of a microkernel approach to system design? How do user programs and system services interact in a microkernel architecture? What are the disadvantages of using the microkernel approach?",
    "answerIndividual": "The main advantage of a microkernel approach is that the kernel is broken down to it's essential parts. Everything beyond that is provided as system services allowing for a more flexible life-cycle of change where services may change without impacting change in the kernel. This allows system services to be improved, changed, and removed even while the operating system is running. A disadvantage of the microkernel architecture would be a performance hit due to the overhead of message passing between user level system services. These services must pass messages through the microkernel in order to communicate with one another as they each have their own memory space and cannot communicate with one another directly.",
    "answerKey": "Benefits typically include the follwing: (a) adding a new service does not require modifying the kernel, (b) it is more secure as more operations are done in user mode than in kernel mode, and (c) a simpler kernel design and functionality typically results in a more reliable operating system. User programs and system services interact in a microkernel architecture by using interprocess communication mechanisms such as messaging. These messages are conveyed by the operating system. The primary disadvantage of the microkernel architecture are the overheads associated with interprocess communication and the frequent use of the operating system's messaging functions in order to enable the user process and the system service to interact with each other."
  },{
    "number": "2.20",
    "question":"What are the advantages of using loadable kernel modules?",
    "answerIndividual": "LKM's provide a savings on communication due to the fact it does not require message passing and can communicate directly to other modules. They are also dynamic in the sense you can have a core set of services part of the kernel and then dynamically load more services as you reach boot. This provides a level of optionality on having a flexible system that can perform as efficiently as a monolith without the monolithic bundle of services that must move as a single deployment.",
    "answerKey": "It is difficult to predict what features an operating system will need when it is being designed. The advantage of using loadable kernel modules is that functionality can be added to and removed from the kernel while it is running. There is no need to either recompile or reboot the kernel."
  },{
    "number": "2.21",
    "question":"How are iOS and Android similar? How are they different?",
    "answerIndividual": "iOS and Android are similar due to the fact they are mobile based operating systems that must make tradeoffs on performance vs power consumption and efficient utilization of resources. They differ in the restrictive nature iOS has placed on these devices and limiting direct access to POSIX and BSD apis whereas in Java you can perform JNI calls to directly access hardware resources.",
    "answerKey": "Similarities: Both are based on existing kernels (Linux and Mac OSX). Both have architecture that uses software stacks. Both provide frameworks for developers.  Differences: iOS is closed-source and Android is open-source. iOS applications are developed in Objective-C and Android in Java. Android uses a virtual machine and iOS executes code natively."
  },{
    "number": "2.22",
    "question":"Explain why Java programs running on Android systems do not use the standard Java API and virtual machine.",
    "answerIndividual": "Because Android is running on mobile hardware which can be limited in memory and cpu, AOT is used where all instructions are compiled to machine code instead of JIT compilation which compiles java down to bytecode and then optimizes hotter regions into native machine instructions. The Android Runtime leverages AOT allowing more efficient application execution as well as lower power consumption. The Android API's are also built to consider the underlying hardware and frameworks leveraged within a mobile system.",
    "answerKey": "It is because the standard API and virutal machine are designed for desktop and server systems, not mobile devices. Google developed a separate API and virtual machine for mobile devices."
  },{
    "number": "2.23",
    "question":"The experimental Synthesis operating system has an assembler incorporated in the kernel. To optimize system-call performance, the kernel assembles routines within kernel space to minimize the path that the system call must take through the kernel. This approach is the antithesis of the layered approach, in which the path through the kernel is extended to make building the operating system easier. Discuss the pros and cons of the Synthesis approach to kernel design and system-performance optimization.",
    "answerIndividual": "",
    "answerKey": ""
  },{
    "number": "2.24",
    "question":"In Section 2.3, we described a program that copies the contents of one file to a destination file. This program works by first prompting the user for the name of the source and destination files. Write this program using either the POSIX or Windows API. Be sure to include all necessary error checking, including ensuring that the source file exists. Once you have correctly designed and tested the program, if you used a system that supports it, run the program using a utility that traces system calls. Linux systems provide the strace utility, and macOS systems use the dtruss command. (The dtruss command, which actually is a front end to dtrace, requires admin privileges, so it must be run using sudo.) These tools can be used as follows (assume that the name of the executable file is FileCopy",
    "answerIndividual": "",
    "answerKey": ""
  }]
}
